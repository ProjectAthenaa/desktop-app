syntax = "proto3";


package integration;

option go_package = "integration/integration";

enum STATUS{
  CREATED = 0;
  RETRIEVED = 1;
  UPDATED = 2;
  DELETED = 3;
  NOT_FOUND = 4;
  ERROR = 5;
  TIMEOUT = 6;
  UNAUTHORIZED = 7;
  EXECUTED = 8;
  RESOURCE_ALREADY_EXISTS = 9;
  SITE_NOT_SUPPORTED = 10;
}


message EmptyRequest{}

message StatusResponse{
  STATUS Status = 1;
}

message IDResponse{
  STATUS Status = 1;
  string ID = 2;
}

//START SETTINGS
service Settings{
  rpc SetSuccessWebhook(Webhook) returns (SetResponse);
  rpc SetDeclineWebhook(Webhook) returns (SetResponse);
  rpc SetCheckoutDelay(Delay) returns (SetResponse);
  rpc SetATCDelay(Delay) returns (SetResponse);

  rpc Get(EmptyRequest) returns (UserSettings);

  rpc TestSuccessWebhook(EmptyRequest) returns (TestResponse);
  rpc TestDeclineWebhook(EmptyRequest) returns (TestResponse);
}

message Webhook{
  string Webhook = 1;
}

message SetResponse{
  STATUS Status = 1;
}

message Delay{
  int32 Delay = 1;
}

message TestResponse{
  STATUS Status = 1;
  int32 Latency = 2;
}

message UserSettings{
  string ID = 1;
  string SuccessWebhook = 2;
  string DeclineWebhook = 3;
  optional int32 CheckoutDelay = 4;
  optional int32 ATCDelay = 5;
}
//END SETTINGS


//START PROXYLISTS
service ProxyList{
  rpc Create(CreateListRequest) returns (CreateListResponse);
  rpc Get(GetListRequest) returns (GetListResponse);
  rpc Update(UpdateListRequest) returns (StatusResponse);
  rpc Delete(DeleteListRequest) returns (StatusResponse);
  rpc Test(TestListRequest) returns (TestListResponse);

  rpc GetAll(EmptyRequest) returns (ProxyLists);
}

enum PROXY_TYPE{
  RESIDENTIAL = 0;
  DATACENTER = 1;
  ISP = 2;
}

enum PROXYLIST_UPDATE_TYPE{
  NAME = 0;
  TYPE = 1;
  PROXIES = 2;
}

enum TEST_STATUS{
  PINGING = 0;
  NOT_PINGING = 1;
}

message ProxyTest{
  int32 Latency = 1;
  TEST_STATUS Status = 2;
  Proxy Proxy = 3;
}

message List{
  string ID = 1;
  string Name = 2;
  repeated Proxy Proxies = 3;
  PROXY_TYPE Type = 4;
}

message Proxy{
  optional string ID = 1;
  optional string Username = 2;
  optional string Password = 3;
  string IP = 4;
  string Port = 5;
}

message CreateListRequest{
  string Name = 1;
  PROXY_TYPE Type = 2;
  repeated Proxy Proxies = 3;
}

message CreateListResponse{
  string ID = 1;
  STATUS Status = 2;
}

message GetListRequest{
  string ID = 1;
}

message GetListResponse{
  string ID = 1;
  string Name = 2;
  PROXY_TYPE Type = 3;
  repeated Proxy Proxies = 4;
  STATUS Status = 5;
}

message UpdateListRequest{
  string ID = 1;
  PROXYLIST_UPDATE_TYPE UpdateType = 2;
  optional string Name = 3;
  optional PROXY_TYPE Type = 4;
  repeated Proxy Proxies = 5;
}

message DeleteListRequest{
  string ID = 1;
}

message TestListRequest{
  string ID = 1;
  string Site = 2;
}

message TestListResponse{
  repeated ProxyTest Tests = 1;
}

message ProxyLists{
  repeated List Lists = 1;
}

//END PROXYLITS


//START PROFILES
service Profiles{
  rpc Create(Profile) returns (IDResponse);
  rpc Update(UpdateProfileRequest) returns (StatusResponse);
  rpc Get(GetProfileRequest) returns (Profile);
  rpc Delete(DeleteProfileRequest) returns (StatusResponse);

  rpc CreateGroup(CreateProfileGroup) returns(IDResponse);
  rpc UpdateGroup(UpdateGroupRequest) returns (StatusResponse);
  rpc GetGroup(GetGroupRequest) returns (ProfileGroup);
  rpc DeleteGroup(DeleteGroupRequest) returns (StatusResponse);

  rpc GetGroups(EmptyRequest) returns (ProfileGroups);
}

enum UPDATE_PROFILE_TYPE{
  PROFILE_NAME = 0;
  PROFILE_EMAIL = 1;
  PROFILE_GROUP_ID = 2;
  SHIPPING = 3;
  BILLING = 4;
}

enum UPDATE_PROFILEGROUP_TYPE{
  PROFILEGROUP_NAME = 0;
  GROUP_PROFILES = 1;
}

message Shipping{
  string FirstName = 2;
  string LastName = 4;
  string PhoneNumber = 5;
  Address ShippingAddress = 6;
  optional Address BillingAddress = 7;
  bool BillingIsShipping = 8;
}

message Address{
  string AddressLine = 2;
  optional string AddressLine2 = 3;
  string Country = 4;
  string State = 5;
  string StateCode = 6;
  string City = 7;
  string ZIP = 8;
}

message Billing{
  string CardHolderName = 2;
  string CardNumber = 3;
  string ExpiryMonth = 4;
  string ExpiryYear = 5;
  string CVV = 6;
}

message EncryptedBilling{
  string CardHolderName = 2;
  string CardNumber = 3;
  string ExpiryMonth = 4;
  string ExpiryYear = 5;
  string CVV = 6;
}

message Profile{
  optional string ID = 1;
  optional string GroupID = 2;

  string Name = 3;
  string Email = 4;
  Shipping Shipping = 5;
  Billing Billing = 6;
}


message UpdateProfileRequest{
  string ID = 1;
  UPDATE_PROFILE_TYPE UpdateType = 2;

  string GroupID = 3;
  optional string Email = 4;
  optional string Name = 5;
  optional Shipping Shipping = 6;
  optional Billing Billing = 7;
}

message GetProfileRequest{
  string ID = 1;
  string GroupID = 2;
}

message DeleteProfileRequest{
  string ID = 1;
  string GroupID = 2;
}

message ProfileGroup{
  string ID = 1;
  string Name = 2;
  repeated Profile Profiles = 3;
}

message CreateProfileGroup{
  optional string ID = 1;
  string Name = 2;
  repeated string Profiles = 3;
}

message UpdateGroupRequest{
  string ID = 1;
  UPDATE_PROFILEGROUP_TYPE UpdateType = 2;
  optional string Name = 3;
  repeated string ProfileIDs = 4;
}

message GetGroupRequest{
  string ID = 1;
}

message DeleteGroupRequest{
  string ID = 1;
}

message ProfileGroups{
  repeated ProfileGroup Groups = 1;
}

//END PROFILES

//START TASKS
service Tasks{
  rpc Create(Task) returns (CreateTaskResponse);
  rpc Update(UpdateTask) returns (StatusResponse);
  rpc Get(GetTask) returns (Task);
  rpc Delete(DeleteTask) returns (StatusResponse);

  rpc CreateGroup(CreateTaskGroup) returns (CreateTaskGroupResponse);
  rpc UpdateGroup(UpdateTaskGroupRequest) returns (StatusResponse);
  rpc DeleteGroup(DeleteGroupRequest) returns (StatusResponse);

  rpc GetGroups(EmptyRequest) returns (TaskGroups);
}

enum TASK_UPDATE_TYPE{
  TASK_SITE = 0;
  TASK_STARTTIME = 1;
  TASK_PRODUCT = 2;
  TASK_PROXYLIST = 3;
  TASK_PROFILE = 4;
}

enum TASK_GROUP_UPDATE_TYPE{
  GROUP_NAME = 0;
  GROUP_TASKS_ADD = 1;
  GROUP_TASKS_DELETE = 2;
}

enum Site{
  FINISHLINE = 0;
  JDSPORTS = 1;
  YEEZYSUPPLY = 2;
  SUPREME = 3;
  EASYBAYUS = 4;
  CHAMPSUS = 5;
  FOOTACTIONUS = 6;
  FOOTLOCKERUS = 7;
  //FOR BETA WE WANT THESE ^^^^^^^^
  BESTBUY = 8;
  POKEMONCENTER = 9;
  PANINIUS = 10;
  TOPPS = 11;
  NORDSTORM = 12;
  END = 13;
  TARGET = 14;
  AMAZON = 15;
  SOLEBOX = 16;
  ONYGO = 17;
  SNIPES = 18;
  SSENSE = 19;
  WALMART = 20;
  HIBBET = 21;
}

message TaskGroup{
  string ID = 1;
  string Name = 2;
  repeated Task Tasks = 3;
}

enum LOOKUP_TYPE {
  KEYWORDS = 0;
  LINK = 1;
}

message Product{
  optional string ID = 1;
  string Name = 2;
  optional string Image = 3;
  repeated string PositiveKeywords = 4;
  repeated string NegativeKeywords = 5;
  repeated string Sizes = 6;
  optional string Link = 7;
  int32 Quantity = 8;
  LOOKUP_TYPE LookupType = 9;
  repeated string Colors = 10;
  //Site specific fields
  optional SupremeCategory SupremeCategory = 11;
}

message Task{
  optional string ID = 1;
  Site Site = 2;
  optional int64 StartTime = 3;
  Product Product = 4;

  string ProxyListID = 5;
  string ProfileGroupID = 6;
  string TaskGroupID = 7;
}

message CreateTaskResponse{
  string ID = 1;
  STATUS Status = 2;
}

message CreateTaskGroupResponse{
  string ID = 1;
  STATUS Status = 2;
}

message UpdateTask{
  string ID = 1;
  TASK_UPDATE_TYPE UpdateType = 2;

  optional Site Site = 3;
  optional int64 StartTime = 4;
  optional Product Product = 5;
  optional string ProxyListID = 6;
  optional string ProfileGroupID = 7;

}

message GetTask{
  string ID = 1;
}

message DeleteTask{
  string ID = 1;
}

message CreateTaskGroup{
  string Name = 1;
  repeated string Tasks = 2;
}

message UpdateTaskGroupRequest{
  string ID = 1;
  optional string Name = 2;
  repeated Task Tasks = 3;
  TASK_GROUP_UPDATE_TYPE UpdateType = 4;
}

message DeleteGroup{
  string ID = 1;
  bool DeleteTasks = 2;
}

message TaskGroups{
  repeated TaskGroup Groups = 1;
}
//END TASKS

enum SupremeCategory{
  Skate = 0;
  Accessories = 1;
  Bags = 2;
  Pants = 3;
  TopsSweaters = 4;
  Hats = 5;
  Jackets = 6;
  Shirts = 7;
  Sweatshirts = 8;
  Shorts = 9;
}


service AccountGroups{
  rpc Create(AccountGroup) returns (IDResponse);
  rpc GetAll(EmptyRequest) returns (AccGroups);
  rpc Update(AccountGroup) returns (IDResponse);
}

message AccGroups{
  repeated AccountGroup Groups = 1;
  STATUS Status = 2;
}

message AccountGroup{
  optional string ID = 1;
  string Name = 2;
  Site Site = 3;
  map<string, string> Accounts = 4;
}
